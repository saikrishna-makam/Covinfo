{% extends "base.html" %}
{% block head %}
{{ super() }}
<script src='static/Chart.min.js'></script>
{% endblock %}
{% block page_content %}
    <div class="page-header">
        <h2 id="bold-text">COVID-19 Statistics</h2>    
    </div>
    <h4 id="bold-text" class="covid-info-label-margin">Cases Across India</h4>
    <div class="row my-4">
        <div class="col-12 col-md-6 col-lg-3 mb-4 mb-lg-0">
          <div class="card">
              <h5 class="card-header">Total Cases</h5>
              <div class="card-body">
                <p class="card-text">{{ data_total['confirmed'] }}</p>
                <p class="card-text text-success">{{ data_total['deltaconfirmed'] }}</p>
              </div>
            </div>
        </div>
        <div class="col-12 col-md-6 mb-4 mb-lg-0 col-lg-3">
          <div class="card">
              <h5 class="card-header">Active Cases</h5>
              <div class="card-body">
                <p class="card-text">{{ data_total['active'] }}</p>
                <p class="card-text text-danger">0</p>
              </div>
            </div>
        </div>
        <div class="col-12 col-md-6 mb-4 mb-lg-0 col-lg-3">
          <div class="card">
              <h5 class="card-header">Recovered Cases</h5>
              <div class="card-body">
                <p class="card-text">{{ data_total['recovered'] }}</p>
                <p class="card-text text-success">{{ data_total['deltarecovered'] }}</p>
              </div>
            </div>
        </div>
        <div class="col-12 col-md-6 mb-4 mb-lg-0 col-lg-3">
          <div class="card">
              <h5 class="card-header">Deaths</h5>
              <div class="card-body">
                <p class="card-text">{{ data_total['deaths'] }}</p>
                <p class="card-text text-success">{{ data_total['deltadeaths'] }}</p>
              </div>
            </div>
        </div>
    </div>
    
    <h4 id="covid-info-label" class="covid-info-label-margin">COVID-19 Statewise Status</h4>
    <table class="table table-striped table-bordered table-condensed">
    <thead>
        <tr>
            <th scope="col">State</th>
            <th scope="col">Total Cases</th>
            <th scope="col">Active</th>
            <th scope="col">Recovered</th>
            <th scope="col">Deaths</th>
            <th scope="col">Delta Total Cases</th>
            <th scope="col">Delta Recovered</th>
            <th scope="col">Delta Deaths</th>
        </tr>
    </thead>
    <tbody>
            {% for key, value in data.iterrows() %}
            {% if key != 0 %}
            <tr>
                <td scope="row">{{ value['state'] }}</td>
                <td scope="row">{{ value['confirmed'] }}</td>
                <td scope="row">{{ value['active'] }}</td>
                <td scope="row">{{ value['recovered'] }}</td>
                <td scope="row">{{ value['deaths'] }}</td>
                <td scope="row">{{ value['deltaconfirmed'] }}</td>
                <td scope="row">{{ value['deltarecovered'] }}</td>
                <td scope="row">{{ value['deltadeaths'] }}</td>
            </tr>
            {% endif %}
            {% endfor %}
    </tbody>
</table>

<h4 id="covid-info-label" class="covid-info-label-margin">COVID Spread Trends</h4>
<center>
<form method="POST">
    {{ form.csrf_token() }}
    {{ form.state }}
</form>
<canvas id="myChart" width="600" height="400"></canvas>
</center>
<script>

Chart.pluginService.register({
	beforeDraw: function (chart, easing) {
		if (chart.config.options.chartArea && chart.config.options.chartArea.backgroundColor) {
			var helpers = Chart.helpers;
			var ctx = chart.chart.ctx;
			var chartArea = chart.chartArea;

			ctx.save();
			ctx.fillStyle = chart.config.options.chartArea.backgroundColor;
			ctx.fillRect(chartArea.left, chartArea.top, chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
			ctx.restore();
		}
	}
});


Chart.defaults.global.responsive = false;
 
var chartData = {
    labels : [{% for item in labels %}
    "{{item}}",
    {% endfor %}],
    datasets : [{
        label: 'New cases',
        fill: true,
        lineTension: 0.1,
        backgroundColor: "rgba(11,156,49,0.6)",
        borderColor: "rgba(11,156,49,1)",
        borderCapStyle: 'butt',
        borderDash: [],
        borderDashOffset: 0.0,
        borderJoinStyle: 'miter',
        pointBorderColor: "rgba(11,156,49,1)",
        pointBackgroundColor: "#fff",
        pointBorderWidth: 1,
        pointHoverRadius: 5,
        pointHoverBackgroundColor: "rgba(11,156,49,1)",
        pointHoverBorderColor: "rgba(220,220,220,1)",
        pointHoverBorderWidth: 2,
        pointRadius: 1,
        pointHitRadius: 10,
        data : [{% for item in values %}
        {{item}},
        {% endfor %}],
        spanGaps: false
    }]
}
 

var ctx = document.getElementById("myChart").getContext("2d");
 
var myChart = new Chart(ctx, {
    type: 'line',
    data: chartData,
    options: {
        chartArea: {
	        backgroundColor: 'rgba(11,156,49,0.2)'
        },
        title: {
          display: true,
          text: "Statewise covid cases timeseries",
        },
        legend: {
          display: false
        },
        scales: {
          xAxes: [{
           gridLines: {
                  display: false
               }
            }],
            yAxes: [{
               gridLines: {
                  display: false
               },
               ticks: {
              beginAtZero: true,
            }
            }]
        }
      },
      onAnimationComplete:function(){
          var tcanvas=document.createElement('myChart');
          var tctx=tcanvas.getContext('2d');
          tcanvas.width=ctx.canvas.width;
          tcanvas.height=ctx.canvas.height;
          tctx.fillStyle='green';
          tctx.fillRect(0,0,tcanvas.width,tcanvas.height);
          tctx.drawImage(canvas,0,0);
      }
});


let state_select = document.getElementById('state')

state_select.onchange = function() {
    state = state_select.value;
    $.ajax({
        type: 'POST',
        data: JSON.stringify({
            'state_code': state,
        }),
        contentType: 'application/json; charset=utf-8',
        url: "{{ url_for('main.index') }}",
        success: function(response) {
            full_data = JSON.parse(response.payload);
            labels1 = full_data['labels'];
            values1 = full_data['values'];
            
            myChart.data.labels=[]
            for (let key in labels1) {
                myChart.data.labels.push(labels1[key])
            }
            myChart.data.datasets[0].data=[]
            for (let key in values1) {
                myChart.data.datasets[0].data.push(values1[key])
            }

            myChart.update();
        }
    });
}
</script>
{% endblock %}
